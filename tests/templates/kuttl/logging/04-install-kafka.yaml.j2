---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-log-config
data:
{% if test_scenario['values']['kafka'].startswith('3.') %}
  log4j.properties: |
    log4j.rootLogger=INFO, CONSOLE, FILE

    log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender
    log4j.appender.CONSOLE.Threshold=INFO
    log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout
    log4j.appender.CONSOLE.layout.ConversionPattern=[%d] %p %m (%c)%n

    log4j.appender.FILE=org.apache.log4j.RollingFileAppender
    log4j.appender.FILE.Threshold=INFO
    log4j.appender.FILE.File=/stackable/log/kafka/kafka.log4j.xml
    log4j.appender.FILE.MaxFileSize=5MB
    log4j.appender.FILE.MaxBackupIndex=1
    log4j.appender.FILE.layout=org.apache.log4j.xml.XMLLayout
{% else %}
  log4j2.properties: |-
    appenders = FILE

    appender.FILE.type = File
    appender.FILE.name = FILE
    appender.FILE.fileName = /stackable/log/kafka/kafka.log4j2.xml
    appender.FILE.layout.type = XMLLayout

    rootLogger.level=INFO
    rootLogger.appenderRefs = FILE
    rootLogger.appenderRef.FILE.ref = FILE
{% endif %}
---
apiVersion: kafka.stackable.tech/v1alpha1
kind: KafkaCluster
metadata:
  name: test-kafka
spec:
  image:
{% if test_scenario['values']['kafka'].find(",") > 0 %}
    custom: "{{ test_scenario['values']['kafka'].split(',')[1] }}"
    productVersion: "{{ test_scenario['values']['kafka'].split(',')[0] }}"
{% else %}
    productVersion: "{{ test_scenario['values']['kafka'] }}"
{% endif %}
    pullPolicy: IfNotPresent
  clusterConfig:
    tls:
      serverSecretClass: null
    vectorAggregatorConfigMapName: kafka-vector-aggregator-discovery
    zookeeperConfigMapName: test-kafka-znode
  brokers:
    roleGroups:
      automatic-log-config:
        replicas: 1
        config:
          logging:
            enableVectorAgent: true
            containers:
              kafka:
                console:
                  level: INFO
                file:
                  level: INFO
                loggers:
                  ROOT:
                    level: INFO
              vector:
                console:
                  level: INFO
                file:
                  level: INFO
                loggers:
                  ROOT:
                    level: INFO
        podOverrides:
          spec:
            containers:
              - name: vector
                volumeMounts:
                  - name: prepared-logs
                    mountPath: /stackable/log/prepared-logs
            volumes:
              - name: prepared-logs
                configMap:
                  name: prepared-logs
      custom-log-config:
        replicas: 1
        config:
          logging:
            enableVectorAgent: true
            containers:
              kafka:
                custom:
                  configMap: kafka-log-config
