---
apiVersion: zookeeper.stackable.tech/v1alpha1
kind: ZookeeperZnode
metadata:
  name: test-kafka-znode
spec:
  clusterRef:
    name: test-zk
{% if test_scenario['values']['use-client-auth-tls'] == 'true' %}
---
apiVersion: authentication.stackable.tech/v1alpha1
kind: AuthenticationClass
metadata:
  name: test-kafka-client-auth-tls
spec:
  provider:
    tls:
      clientCertSecretClass: test-kafka-client-auth-tls
---
apiVersion: secrets.stackable.tech/v1alpha1
kind: SecretClass
metadata:
  name: test-kafka-client-auth-tls
spec:
  backend:
    autoTls:
      ca:
        secret:
          name: secret-provisioner-tls-kafka-client-auth-ca
          namespace: default
        autoGenerate: true
{% endif %}
{% if test_scenario['values']['use-internal-tls'] == 'true' %}
---
apiVersion: secrets.stackable.tech/v1alpha1
kind: SecretClass
metadata:
  name: test-kafka-internal-tls
spec:
  backend:
    autoTls:
      ca:
        secret:
          name: secret-provisioner-test-kafka-internal-tls-ca
          namespace: default
        autoGenerate: true
{% endif %}
---
apiVersion: kafka.stackable.tech/v1alpha1
kind: KafkaCluster
metadata:
  name: test-kafka
spec:
  image:
    productVersion: "{{ test_scenario['values']['kafka'].split('-stackable')[0] }}"
    stackableVersion: "{{ test_scenario['values']['kafka'].split('-stackable')[1] }}"
  clusterConfig:
    zookeeperConfigMapName: test-kafka-znode
    tls:
{% if test_scenario['values']['use-client-tls'] == 'true' %}
      serverSecretClass: tls
{% else %}
      serverSecretClass: null
{% endif %}
{% if test_scenario['values']['use-client-auth-tls'] == 'true' %}
    authentication:
      - authenticationClass: test-kafka-client-auth-tls
{% endif %}
  brokers:
    roleGroups:
      default:
        replicas: 3
